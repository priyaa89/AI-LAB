from collections import deque

def Solution(a, b, target):
    m = {}  # Dictionary to store visited states
    isSolvable = False
    path = []
    
    q = deque()

    # Initial state: both jugs are empty
    q.append((0, 0))

    while len(q) > 0:
        # Current state
        u = q.popleft()

        # If this state has already been visited, skip it
        if (u[0], u[1]) in m:
            continue

        # If out of bounds, skip
        if u[0] > a or u[1] > b or u[0] < 0 or u[1] < 0:
            continue

        # Add the current state to the path
        path.append([u[0], u[1]])

        # Mark the state as visited
        m[(u[0], u[1])] = 1

        # If we reach the target amount in either jug
        if u[0] == target or u[1] == target:
            isSolvable = True

            if u[0] == target and u[1] != 0:
                path.append([u[0], 0])
            elif u[1] == target and u[0] != 0:
                path.append([0, u[1]])

            # Print the path to the solution
            print("Path from initial state to solution state:")
            for p in path:
                print(f"({p[0]}, {p[1]})")
            return  # Exit once solution is found

        # Add possible next moves

        # Fill Jug 2 completely
        q.append((u[0], b))

        # Fill Jug 1 completely
        q.append((a, u[1]))

        # Transfer water from Jug 1 to Jug 2
        for ap in range(max(a, b) + 1):
            c = u[0] - ap  # Reduce water in Jug1
            d = u[1] + ap  # Increase water in Jug2

            if c == 0 or d == b:
                q.append((c, d))

        # Transfer water from Jug 2 to Jug 1
        for ap in range(max(a, b) + 1):
            c = u[0] + ap  # Increase water in Jug1
            d = u[1] - ap  # Reduce water in Jug2

            if d == 0 or c == a:
                q.append((c, d))

        # Empty Jug 1
        q.append((0, u[1]))

        # Empty Jug 2
        q.append((u[0], 0))

    # If no solution is found
    if not isSolvable:
        print("Solution not possible")

if __name__ == '__main__':
    Jug1, Jug2, target = 4, 3, 2
    Solution(Jug1, Jug2, target)
